{
  "Blog": [
    {
      "id": "react-relay",
      "title": "آموزش Relay در React: مدیریت پیشرفته داده‌های GraphQL",
      "excerpt": "Relay یک فریمورک قدرتمند برای کار با GraphQL در اپلیکیشن‌های React است که توسط فیسبوک توسعه داده شده. این راهنما به شما نشان می‌دهد چگونه با Relay داده‌های GraphQL را بهینه دریافت و مدیریت کنید.",
      "content": "<section class=\"mb-12\">\n <h1 class=\"text-3xl md:text-4xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-teal-400 text-center mb-4\">آموزش Relay در React</h1>\n <p class=\"text-slate-400 text-center mb-8 max-w-full text-base sm:text-lg leading-relaxed\">Relay یک فریمورک کلاینت GraphQL است که برای ساخت اپلیکیشن‌های داده‌محور در مقیاس بزرگ طراحی شده است.</p>\n</section>\n\n<section id=\"intro\" class=\"mb-12 px-2\">\n <h2 class=\"text-xl sm:text-2xl font-bold text-blue-400 border-r-4 border-blue-400 pr-3 mb-4\">Relay چیست؟</h2>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">Relay ویژگی‌های کلیدی زیر را ارائه می‌دهد:</p>\n <ul class=\"list-disc text-slate-400 mb-4 pl-6 space-y-2\">\n  <li>بهینه‌سازی خودکار درخواست‌های GraphQL</li>\n  <li>مدیریت پیشرفته کش</li>\n  <li>پشتیبانی از colocation (هم‌مکانی کامپوننت‌ها و کوئری‌ها)</li>\n  <li>تایپ‌های TypeScript یکپارچه</li>\n </ul>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">این فریمورک برای اپلیکیشن‌های پیچیده و در مقیاس بزرگ ایده‌آل است.</p>\n</section>\n\n<section id=\"installation\" class=\"mb-12 px-2\">\n <h2 class=\"text-xl sm:text-2xl font-bold text-blue-400 border-r-4 border-blue-400 pr-3 mb-4\">نصب و راه‌اندازی</h2>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">برای شروع کار با Relay، ابتدا بسته‌های مورد نیاز را نصب کنید:</p>\n <div class=\"bg-slate-900 rounded-lg p-4 mb-6 overflow-x-auto text-xs sm:text-sm\" style=\"direction: ltr; text-align: left;\">\n <pre><code class=\"lang-bash text-slate-300\">npm install react-relay relay-runtime graphql</code></pre>\n </div>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">سپس Relay Environment را تنظیم کنید:</p>\n <div class=\"bg-slate-900 rounded-lg p-4 overflow-x-auto text-xs sm:text-sm\" style=\"direction: ltr; text-align: left;\">\n <pre><code class=\"lang-jsx text-slate-300\">import { Environment, Network, RecordSource, Store } from 'relay-runtime';\n\nasync function fetchQuery(operation, variables) {\n  const response = await fetch('/graphql', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      query: operation.text,\n      variables,\n    }),\n  });\n  return response.json();\n}\n\nconst environment = new Environment({\n  network: Network.create(fetchQuery),\n  store: new Store(new RecordSource()),\n});</code></pre>\n </div>\n</section>\n\n<section id=\"basic-usage\" class=\"mb-12 px-2\">\n <h2 class=\"text-xl sm:text-2xl font-bold text-blue-400 border-r-4 border-blue-400 pr-3 mb-4\">استفاده پایه</h2>\n \n <h3 class=\"text-lg font-semibold text-blue-300 mb-3\">تعریف کوئری‌ها با GraphQL Tag</h3>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">در Relay هر کامپوننت کوئری مربوط به خود را تعریف می‌کند:</p>\n <div class=\"bg-slate-900 rounded-lg p-4 mb-6 overflow-x-auto text-xs sm:text-sm\" style=\"direction: ltr; text-align: left;\">\n <pre><code class=\"lang-jsx text-slate-300\">import { graphql } from 'react-relay';\n\nconst UserQuery = graphql`\n  query UserProfileQuery($userId: ID!) {\n    user(id: $userId) {\n      id\n      name\n      email\n    }\n  }\n`;</code></pre>\n </div>\n \n <h3 class=\"text-lg font-semibold text-blue-300 mb-3\">استفاده از usePreloadedQuery</h3>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">برای دریافت داده‌ها از هوک usePreloadedQuery استفاده کنید:</p>\n <div class=\"bg-slate-900 rounded-lg p-4 overflow-x-auto text-xs sm:text-sm\" style=\"direction: ltr; text-align: left;\">\n <pre><code class=\"lang-jsx text-slate-300\">import { usePreloadedQuery } from 'react-relay';\n\nfunction UserProfile({ queryRef }) {\n  const data = usePreloadedQuery(UserQuery, queryRef);\n\n  return (\n    <div>\n      <h1>{data.user.name}</h1>\n      <p>{data.user.email}</p>\n    </div>\n  );\n}</code></pre>\n </div>\n</section>\n\n<section id=\"advanced-features\" class=\"mb-12 px-2\">\n <h2 class=\"text-xl sm:text-2xl font-bold text-blue-400 border-r-4 border-blue-400 pr-3 mb-4\">ویژگی‌های پیشرفته</h2>\n \n <h3 class=\"text-lg font-semibold text-blue-300 mb-3\">Fragments و Composition</h3>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">با استفاده از Fragments می‌توانید داده‌ها را به کامپوننت‌های کوچکتر تقسیم کنید:</p>\n <div class=\"bg-slate-900 rounded-lg p-4 mb-6 overflow-x-auto text-xs sm:text-sm\" style=\"direction: ltr; text-align: left;\">\n <pre><code class=\"lang-jsx text-slate-300\">const UserFragment = graphql`\n  fragment UserComponent_user on User {\n    id\n    name\n    avatarUrl\n  }\n`;\n\nfunction UserComponent({ user }) {\n  const data = useFragment(UserFragment, user);\n  \n  return (\n    <div>\n      <img src={data.avatarUrl} alt={data.name} />\n      <h2>{data.name}</h2>\n    </div>\n  );\n}</code></pre>\n </div>\n \n <h3 class=\"text-lg font-semibold text-blue-300 mb-3\">Mutation‌ها در Relay</h3>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">برای تغییر داده‌ها از useMutation استفاده کنید:</p>\n <div class=\"bg-slate-900 rounded-lg p-4 overflow-x-auto text-xs sm:text-sm\" style=\"direction: ltr; text-align: left;\">\n <pre><code class=\"lang-jsx text-slate-300\">import { useMutation } from 'react-relay';\n\nconst UpdateUserMutation = graphql`\n  mutation UpdateUserMutation($input: UpdateUserInput!) {\n    updateUser(input: $input) {\n      user {\n        id\n        name\n      }\n    }\n  }\n`;\n\nfunction UpdateUserForm({ userId }) {\n  const [commitMutation, isInFlight] = useMutation(UpdateUserMutation);\n  \n  const handleSubmit = (name) => {\n    commitMutation({\n      variables: {\n        input: { userId, name }\n      },\n      onCompleted: (response) => {\n        console.log('User updated:', response.updateUser.user);\n      },\n    });\n  };\n  \n  // ...\n}</code></pre>\n </div>\n</section>\n\n<section id=\"conclusion\" class=\"mb-12 px-2\">\n <h2 class=\"text-xl sm:text-2xl font-bold text-blue-400 border-r-4 border-blue-400 pr-3 mb-4\">جمع‌بندی</h2>\n <div class=\"bg-slate-800 rounded-xl p-5\">\n <p class=\"text-slate-400 text-sm\">Relay یک فریمورک پیشرفته برای کار با GraphQL در React است که با ارائه ویژگی‌هایی مانند بهینه‌سازی خودکار درخواست‌ها، مدیریت پیشرفته کش و پشتیبانی از colocation، توسعه اپلیکیشن‌های داده‌محور در مقیاس بزرگ را ممکن می‌سازد. در این آموزش با مباحث پایه و پیشرفته Relay شامل تعریف کوئری‌ها، fragments، mutationها و معماری کلی Relay آشنا شدید. Relay برای پروژه‌های بزرگ و پیچیده که نیاز به مدیریت حرفه‌ای داده دارند گزینه‌ای ایده‌آل است.</p>\n </div>\n</section>",
      "image": {
        "src": "https://uploadkon.ir/uploads/958423_25Relay.png",
        "alt": "Relay در React",
        "title": "Relay در React"
      },
      "category": "ReactJS",
      "date": "1403/04/28",
      "author": "محمد علی سماوات",
      "tags": [
        "React",
        "Relay",
        "GraphQL",
        "مدیریت داده در React",
        "فریمورک GraphQL",
        "usePreloadedQuery",
        "useFragment",
        "useMutation",
        "فیسبوک Relay",
        "آموزش Relay",
        "آموزش GraphQL پیشرفته",
        "مقایسه Relay و Apollo",
        "کشینگ در Relay",
        "Fragments در Relay",
        "Optimistic Updates",
        "کتابخانه‌های React",
        "آموزش Relay در React",
        "نحوه استفاده از Relay"
      ]
    }
  ]
}