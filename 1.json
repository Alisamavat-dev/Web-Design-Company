{
  "Blog": [
    {
      "id": "react-urql",
      "title": "آموزش Urql در React: مدیریت داده‌های GraphQL به سادگی",
      "excerpt": "Urql یک کتابخانه سبک‌وزن و قدرتمند برای کار با GraphQL در React است. این راهنما به شما نشان می‌دهد چگونه با Urql داده‌های GraphQL را دریافت کنید، کش کنید و بهینه‌سازی نمایید.",
      "content": "<section class=\"mb-12\">\n <h1 class=\"text-3xl md:text-4xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-teal-400 text-center mb-4\">آموزش Urql در React</h1>\n <p class=\"text-slate-400 text-center mb-8 max-w-full text-base sm:text-lg leading-relaxed\">Urql (تلفظ \"urkel\") یک کلاینت GraphQL ساده، انعطاف‌پذیر و قابل توسعه برای React است که توسط Formidable Labs توسعه داده شده است.</p>\n</section>\n\n<section id=\"intro\" class=\"mb-12 px-2\">\n <h2 class=\"text-xl sm:text-2xl font-bold text-blue-400 border-r-4 border-blue-400 pr-3 mb-4\">Urql چیست؟</h2>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">Urql یک کلاینت GraphQL برای React است که ویژگی‌های کلیدی زیر را ارائه می‌دهد:</p>\n <ul class=\"list-disc text-slate-400 mb-4 pl-6 space-y-2\">\n  <li>پیاده‌سازی ساده و قابل درک</li>\n  <li>پشتیبانی از کشینگ پیشرفته</li>\n  <li>قابلیت توسعه‌پذیری بالا</li>\n  <li>تجربه توسعه عالی با TypeScript</li>\n </ul>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">این کتابخانه برای پروژه‌های کوچک تا متوسط که از GraphQL استفاده می‌کنند ایده‌آل است.</p>\n</section>\n\n<section id=\"installation\" class=\"mb-12 px-2\">\n <h2 class=\"text-xl sm:text-2xl font-bold text-blue-400 border-r-4 border-blue-400 pr-3 mb-4\">نصب و راه‌اندازی</h2>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">برای شروع کار با Urql، ابتدا آن را در پروژه خود نصب کنید:</p>\n <div class=\"bg-slate-900 rounded-lg p-4 mb-6 overflow-x-auto text-xs sm:text-sm\" style=\"direction: ltr; text-align: left;\">\n <pre><code class=\"lang-bash text-slate-300\">npm install @urql/core @urql/react graphql</code></pre>\n </div>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">سپس در فایل اصلی برنامه Provider را تنظیم کنید:</p>\n <div class=\"bg-slate-900 rounded-lg p-4 overflow-x-auto text-xs sm:text-sm\" style=\"direction: ltr; text-align: left;\">\n <pre><code class=\"lang-jsx text-slate-300\">import { createClient, Provider } from '@urql/core';\n\nconst client = createClient({\n  url: 'https://your-graphql-endpoint.com/graphql',\n});\n\nfunction App() {\n  return (\n    <Provider value={client}>\n      <YourApp />\n    </Provider>\n  );\n}</code></pre>\n </div>\n</section>\n\n<section id=\"basic-usage\" class=\"mb-12 px-2\">\n <h2 class=\"text-xl sm:text-2xl font-bold text-blue-400 border-r-4 border-blue-400 pr-3 mb-4\">استفاده پایه</h2>\n \n <h3 class=\"text-lg font-semibold text-blue-300 mb-3\">دریافت داده‌ها با useQuery</h3>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">برای دریافت داده‌ها از هوک useQuery استفاده کنید:</p>\n <div class=\"bg-slate-900 rounded-lg p-4 mb-6 overflow-x-auto text-xs sm:text-sm\" style=\"direction: ltr; text-align: left;\">\n <pre><code class=\"lang-jsx text-slate-300\">import { useQuery } from '@urql/react';\n\nconst GET_USERS = `\n  query {\n    users {\n      id\n      name\n      email\n    }\n  }\n`;\n\nfunction Users() {\n  const [result] = useQuery({\n    query: GET_USERS,\n  });\n\n  const { data, fetching, error } = result;\n\n  if (fetching) return <div>در حال بارگذاری...</div>;\n  if (error) return <div>خطا: {error.message}</div>;\n\n  return (\n    <ul>\n      {data.users.map(user => (\n        <li key={user.id}>{user.name} - {user.email}</li>\n      ))}\n    </ul>\n  );\n}</code></pre>\n </div>\n \n <h3 class=\"text-lg font-semibold text-blue-300 mb-3\">ارسال mutation با useMutation</h3>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">برای تغییر داده‌ها از هوک useMutation استفاده کنید:</p>\n <div class=\"bg-slate-900 rounded-lg p-4 overflow-x-auto text-xs sm:text-sm\" style=\"direction: ltr; text-align: left;\">\n <pre><code class=\"lang-jsx text-slate-300\">import { useMutation } from '@urql/react';\n\nconst ADD_USER = `\n  mutation($name: String!, $email: String!) {\n    addUser(name: $name, email: $email) {\n      id\n      name\n    }\n  }\n`;\n\nfunction AddUser() {\n  const [result, executeMutation] = useMutation(ADD_USER);\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    executeMutation({ \n      name: e.target.name.value, \n      email: e.target.email.value \n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"name\" placeholder=\"نام\" />\n      <input name=\"email\" placeholder=\"ایمیل\" />\n      <button type=\"submit\">ثبت کاربر</button>\n    </form>\n  );\n}</code></pre>\n </div>\n</section>\n\n<section id=\"advanced-features\" class=\"mb-12 px-2\">\n <h2 class=\"text-xl sm:text-2xl font-bold text-blue-400 border-r-4 border-blue-400 pr-3 mb-4\">ویژگی‌های پیشرفته</h2>\n \n <h3 class=\"text-lg font-semibold text-blue-300 mb-3\">کشینگ و revalidation</h3>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">Urql به صورت پیش‌فرض از کشینگ استفاده می‌کند:</p>\n <div class=\"bg-slate-900 rounded-lg p-4 mb-6 overflow-x-auto text-xs sm:text-sm\" style=\"direction: ltr; text-align: left;\">\n <pre><code class=\"lang-jsx text-slate-300\">import { useQuery } from '@urql/react';\n\nfunction UserProfile({ id }) {\n  const [result, reexecuteQuery] = useQuery({\n    query: GET_USER,\n    variables: { id },\n    requestPolicy: 'cache-and-network' // استراتژی کشینگ\n  });\n\n  // ...\n}</code></pre>\n </div>\n \n <h3 class=\"text-lg font-semibold text-blue-300 mb-3\">فیلترهای سفارشی (Exchanges)</h3>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">می‌توانید رفتار Urql را با Exchanges سفارشی کنید:</p>\n <div class=\"bg-slate-900 rounded-lg p-4 overflow-x-auto text-xs sm:text-sm\" style=\"direction: ltr; text-align: left;\">\n <pre><code class=\"lang-jsx text-slate-300\">import { createClient, dedupExchange, cacheExchange, fetchExchange } from '@urql/core';\nimport { retryExchange } from '@urql/exchange-retry';\n\nconst client = createClient({\n  url: 'https://your-graphql-endpoint.com/graphql',\n  exchanges: [\n    dedupExchange,\n    cacheExchange,\n    retryExchange({\n      initialDelayMs: 1000,\n      maxDelayMs: 15000,\n      randomDelay: true,\n      maxNumberAttempts: 5,\n    }),\n    fetchExchange,\n  ],\n});</code></pre>\n </div>\n</section>\n\n<section id=\"conclusion\" class=\"mb-12 px-2\">\n <h2 class=\"text-xl sm:text-2xl font-bold text-blue-400 border-r-4 border-blue-400 pr-3 mb-4\">جمع‌بندی</h2>\n <div class=\"bg-slate-800 rounded-xl p-5\">\n <p class=\"text-slate-400 text-sm\">Urql یک کلاینت GraphQL ساده اما قدرتمند برای React است که با ارائه API ساده و قابلیت‌های پیشرفته مانند کشینگ و exchanges، تجربه توسعه با GraphQL را بهبود می‌بخشد. در این آموزش با مباحث پایه و پیشرفته Urql شامل دریافت داده‌ها، ارسال mutationها، مدیریت کش و سفارشی‌سازی رفتار کلاینت آشنا شدید. Urql برای پروژه‌هایی که نیاز به راه‌حلی سبک‌وزن و قابل توسعه دارند گزینه‌ای ایده‌آل است.</p>\n </div>\n</section>",
      "image": {
        "src": "https://uploadkon.ir/uploads/614023_25urql.jpg",
        "alt": "Urql در React",
        "title": "Urql در React"
      },
      "category": "ReactJS",
      "date": "1403/04/27",
      "author": "محمد علی سماوات",
      "tags": [
        "React",
        "Urql",
        "GraphQL",
        "مدیریت داده در React",
        "کلاینت GraphQL",
        "useQuery",
        "useMutation",
        "کشینگ",
        "Exchanges",
        "آموزش Urql",
        "آموزش GraphQL در React",
        "مقایسه Urql و Apollo",
        "آموزش useQuery",
        "آموزش useMutation",
        "Formidable Labs",
        "کتابخانه‌های React",
        "آموزش Urql در React",
        "نحوه استفاده از Urql"
      ]
    }
  ]
}