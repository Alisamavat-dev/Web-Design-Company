{
  "Blog": [
    {
      "id": "react-hooks",
      "title": "آموزش جامع هوک‌ها در React: مدیریت state و اثرات جانبی",
      "excerpt": "هوک‌ها (Hooks) یکی از قوی‌ترین ویژگی‌های React هستند که امکان استفاده از state و دیگر قابلیت‌های React را در کامپوننت‌های تابعی فراهم می‌کنند. این راهنما به شما یاد می‌دهد چگونه از هوک‌ها به صورت حرفه‌ای استفاده کنید.",
      "content": "<section class=\"mb-12\">\n <h1 class=\"text-3xl md:text-4xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-400 text-center mb-4\">آموزش هوک‌ها در React</h1>\n <p class=\"text-slate-400 text-center mb-8 max-w-full text-base sm:text-lg leading-relaxed\">هوک‌ها در React 16.8 معرفی شدند و انقلابی در نحوه نوشتن کامپوننت‌های تابعی ایجاد کردند. با استفاده از هوک‌ها می‌توانید state و lifecycle متدها را در کامپوننت‌های تابعی استفاده کنید.</p>\n</section>\n\n<section id=\"intro\" class=\"mb-12 px-2\">\n <h2 class=\"text-xl sm:text-2xl font-bold text-purple-400 border-r-4 border-purple-400 pr-3 mb-4\">هوک‌ها چیست؟</h2>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">هوک‌ها توابع ویژه‌ای هستند که به شما امکان می‌دهند به قابلیت‌های React مانند state و lifecycle متدها در کامپوننت‌های تابعی دسترسی داشته باشید. هوک‌ها کد شما را تمیزتر، قابل فهم‌تر و قابل استفاده مجددتر می‌کنند.</p>\n</section>\n\n<section id=\"basic-hooks\" class=\"mb-12 px-2\">\n <h2 class=\"text-xl sm:text-2xl font-bold text-purple-400 border-r-4 border-purple-400 pr-3 mb-4\">هوک‌های پایه</h2>\n \n <h3 class=\"text-lg font-semibold text-purple-300 mb-3\">useState - مدیریت state</h3>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">هوک useState به شما امکان می‌دهد state را در کامپوننت‌های تابعی مدیریت کنید:</p>\n <div class=\"bg-slate-900 rounded-lg p-4 mb-6 overflow-x-auto text-xs sm:text-sm\" style=\"direction: ltr; text-align: left;\">\n <pre><code class=\"lang-jsx text-slate-300\">import { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>شما {count} بار کلیک کرده‌اید</p>\n      <button onClick={() => setCount(count + 1)}>\n        افزایش\n      </button>\n    </div>\n  );\n}</code></pre>\n </div>\n \n <h3 class=\"text-lg font-semibold text-purple-300 mb-3\">useEffect - مدیریت اثرات جانبی</h3>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">هوک useEffect برای مدیریت اثرات جانبی مانند fetch داده، subscriptions یا تغییر DOM استفاده می‌شود:</p>\n <div class=\"bg-slate-900 rounded-lg p-4 mb-6 overflow-x-auto text-xs sm:text-sm\" style=\"direction: ltr; text-align: left;\">\n <pre><code class=\"lang-jsx text-slate-300\">import { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    fetch('https://api.example.com/data')\n      .then(response => response.json())\n      .then(data => setData(data));\n  }, []); // آرایه وابستگی خالی یعنی فقط یک بار اجرا شود\n\n  return (\n    <div>\n      {data ? <p>{data.message}</p> : <p>در حال بارگذاری...</p>}\n    </div>\n  );\n}</code></pre>\n </div>\n \n <h3 class=\"text-lg font-semibold text-purple-300 mb-3\">useContext - مدیریت context</h3>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">هوک useContext به شما امکان می‌دهد به contextهای React دسترسی داشته باشید:</p>\n <div class=\"bg-slate-900 rounded-lg p-4 overflow-x-auto text-xs sm:text-sm\" style=\"direction: ltr; text-align: left;\">\n <pre><code class=\"lang-jsx text-slate-300\">import { useContext } from 'react';\nimport ThemeContext from './ThemeContext';\n\nfunction ThemedButton() {\n  const theme = useContext(ThemeContext);\n  \n  return (\n    <button style={{ background: theme.background, color: theme.foreground }}>\n      من یک دکمه با تم هستم\n    </button>\n  );\n}</code></pre>\n </div>\n</section>\n\n<section id=\"additional-hooks\" class=\"mb-12 px-2\">\n <h2 class=\"text-xl sm:text-2xl font-bold text-purple-400 border-r-4 border-purple-400 pr-3 mb-4\">هوک‌های اضافی</h2>\n \n <h3 class=\"text-lg font-semibold text-purple-300 mb-3\">useReducer - مدیریت state پیچیده</h3>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">برای مدیریت state منطقی پیچیده‌تر از useState:</p>\n <div class=\"bg-slate-900 rounded-lg p-4 mb-6 overflow-x-auto text-xs sm:text-sm\" style=\"direction: ltr; text-align: left;\">\n <pre><code class=\"lang-jsx text-slate-300\">import { useReducer } from 'react';\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    case 'decrement':\n      return { count: state.count - 1 };\n    default:\n      throw new Error();\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, { count: 0 });\n\n  return (\n    <div>\n      <p>Count: {state.count}</p>\n      <button onClick={() => dispatch({ type: 'increment' })}>+</button>\n      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>\n    </div>\n  );\n}</code></pre>\n </div>\n \n <h3 class=\"text-lg font-semibold text-purple-300 mb-3\">useCallback - بهینه‌سازی عملکرد</h3>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">برای memoize کردن توابع و جلوگیری از renderهای غیرضروری:</p>\n <div class=\"bg-slate-900 rounded-lg p-4 mb-6 overflow-x-auto text-xs sm:text-sm\" style=\"direction: ltr; text-align: left;\">\n <pre><code class=\"lang-jsx text-slate-300\">import { useCallback } from 'react';\n\nfunction MyComponent({ onClick }) {\n  const handleClick = useCallback(() => {\n    onClick('پارامتر کلیک');\n  }, [onClick]);\n\n  return <button onClick={handleClick}>کلیک کنید</button>;\n}</code></pre>\n </div>\n \n <h3 class=\"text-lg font-semibold text-purple-300 mb-3\">useMemo - محاسبات بهینه</h3>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">برای memoize کردن مقادیر محاسباتی سنگین:</p>\n <div class=\"bg-slate-900 rounded-lg p-4 overflow-x-auto text-xs sm:text-sm\" style=\"direction: ltr; text-align: left;\">\n <pre><code class=\"lang-jsx text-slate-300\">import { useMemo } from 'react';\n\nfunction ExpensiveComponent({ a, b }) {\n  const result = useMemo(() => {\n    // محاسبات سنگین\n    return a * b;\n  }, [a, b]);\n\n  return <div>{result}</div>;\n}</code></pre>\n </div>\n</section>\n\n<section id=\"custom-hooks\" class=\"mb-12 px-2\">\n <h2 class=\"text-xl sm:text-2xl font-bold text-purple-400 border-r-4 border-purple-400 pr-3 mb-4\">هوک‌های سفارشی</h2>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">می‌توانید هوک‌های خود را ایجاد کنید تا منطق stateful را بین کامپوننت‌ها به اشتراک بگذارید:</p>\n <div class=\"bg-slate-900 rounded-lg p-4 mb-6 overflow-x-auto text-xs sm:text-sm\" style=\"direction: ltr; text-align: left;\">\n <pre><code class=\"lang-jsx text-slate-300\">import { useState, useEffect } from 'react';\n\nfunction useFetch(url) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch(url);\n      const json = await response.json();\n      setData(json);\n      setLoading(false);\n    }\n\n    fetchData();\n  }, [url]);\n\n  return { data, loading };\n}\n\n// استفاده در کامپوننت\nfunction MyComponent() {\n  const { data, loading } = useFetch('https://api.example.com/data');\n\n  if (loading) return <div>در حال بارگذاری...</div>;\n  \n  return <div>{JSON.stringify(data)}</div>;\n}</code></pre>\n </div>\n <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">هوک‌های سفارشی یکی از قدرتمندترین ویژگی‌های React هستند که به شما امکان می‌دهند منطق پیچیده را کپسوله و مجددا استفاده کنید.</p>\n</section>\n\n<section id=\"rules\" class=\"mb-12 px-2\">\n <h2 class=\"text-xl sm:text-2xl font-bold text-purple-400 border-r-4 border-purple-400 pr-3 mb-4\">قوانین هوک‌ها</h2>\n <div class=\"bg-slate-800 rounded-xl p-5 mb-4\">\n  <h3 class=\"text-lg font-semibold text-purple-300 mb-3\">1. فقط در سطح بالا هوک‌ها را فراخوانی کنید</h3>\n  <p class=\"text-slate-400 text-sm\">هوک‌ها را در حلقه‌ها، شرط‌ها یا توابع تو در تو فراخوانی نکنید. همیشه در بالاترین سطح کامپوننت‌های تابعی از آنها استفاده کنید.</p>\n </div>\n \n <div class=\"bg-slate-800 rounded-xl p-5\">\n  <h3 class=\"text-lg font-semibold text-purple-300 mb-3\">2. فقط از هوک‌ها در کامپوننت‌های تابعی React استفاده کنید</h3>\n  <p class=\"text-slate-400 text-sm\">هوک‌ها را از کامپوننت‌های تابعی React یا از هوک‌های سفارشی دیگر فراخوانی کنید. از آنها در توابع معمولی JavaScript استفاده نکنید.</p>\n </div>\n</section>\n\n<section id=\"conclusion\" class=\"mb-12 px-2\">\n <h2 class=\"text-xl sm:text-2xl font-bold text-purple-400 border-r-4 border-purple-400 pr-3 mb-4\">جمع‌بندی</h2>\n <div class=\"bg-slate-800 rounded-xl p-5\">\n <p class=\"text-slate-400 text-sm\">هوک‌ها انقلابی در نحوه نوشتن کامپوننت‌های React ایجاد کرده‌اند. آنها به شما امکان می‌دهند state و lifecycle متدها را در کامپوننت‌های تابعی استفاده کنید، کدهای تمیزتر و ماژولارتری بنویسید و منطق stateful را بین کامپوننت‌ها به اشتراک بگذارید. با یادگیری صحیح هوک‌ها می‌توانید برنامه‌های React کارآمدتر و قابل نگهداری‌تری بسازید.</p>\n </div>\n</section>",
      "image": {
        "src": "https://uploadkon.ir/uploads/93b012_25HOOKS.png",
        "alt": "React Hooks",
        "title": "React Hooks"
      },
      "category": "ReactJS",
      "date": "1403/04/20",
      "author": "محمد علی سماوات",
      "tags": [
        "React",
        "Hooks",
        "useState",
        "useEffect",
        "useContext",
        "useReducer",
        "useCallback",
        "useMemo",
        "Custom Hooks",
        "آموزش React",
        "هوک‌های React",
        "مدیریت state",
        "اثرات جانبی",
        "کامپوننت تابعی",
        "اموزش react hooks",
        "اموزش hooks در react"
      ]
    }
  ]
}