{
  "Blog": [
    {
      "id": "react-query",
      "title": "آموزش جامع React Query: مدیریت حالت سرور در برنامه‌های React",
      "excerpt": "React Query یک کتابخانه قدرتمند برای مدیریت داده‌های سرور، کشینگ، همگام‌سازی و به‌روزرسانی خودکار در برنامه‌های React است که توسعه را ساده‌تر می‌کند.",
      "content": "<section class=\"mb-12\">\n  <h1 class=\"text-3xl md:text-4xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-indigo-400 text-center mb-4\">آموزش React Query</h1>\n  <p class=\"text-slate-400 text-center mb-8 max-w-full text-base sm:text-lg leading-relaxed\">React Query کتابخانه‌ای مدرن برای مدیریت داده‌های سرور در برنامه‌های React است که فرآیند fetch کردن، کش کردن، همگام‌سازی و به‌روزرسانی داده‌ها را به ساده‌ترین شکل ممکن انجام می‌دهد. این کتابخانه با ارائه ابزارهای قدرتمند، توسعه‌دهندگان را از پیچیدگی‌های مدیریت حالت سرور رها می‌کند.</p>\n</section>\n\n<section id=\"intro\" class=\"mb-12 px-2\">\n  <h2 class=\"text-xl sm:text-2xl font-bold text-blue-400 border-r-4 border-blue-400 pr-3 mb-4\">چرا React Query؟</h2>\n  <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">در برنامه‌های مدرن وب، مدیریت داده‌های سرور یکی از چالش‌برانگیزترین بخش‌هاست. React Query با ارائه راهکارهایی برای کشینگ، به‌روزرسانی خودکار، مدیریت خطاها، pagination و infinite scroll زندگی را برای توسعه‌دهندگان ساده‌تر می‌کند. دیگر نیازی به استفاده از Redux برای مدیریت داده‌های سرور نیست و می‌توانید با کد کمتر، عملکرد بهتری داشته باشید.</p>\n</section>\n\n<section id=\"getting-started\" class=\"mb-12 px-2\">\n  <h2 class=\"text-xl sm:text-2xl font-bold text-blue-400 border-r-4 border-blue-400 pr-3 mb-4\">نصب و شروع کار</h2>\n  <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">نصب کتابخانه از طریق npm یا yarn:</p>\n  <div class=\"bg-slate-900 rounded-lg p-4 mb-6 overflow-x-auto text-xs sm:text-sm\">\n    <pre><code class=\"lang-bash text-slate-300\">npm install react-query</code></pre>\n    <pre><code class=\"lang-bash text-slate-300\"># یا با Yarn:\nyarn add react-query</code></pre>\n  </div>\n  <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">سپس در فایل اصلی برنامه آن را تنظیم کنید:</p>\n  <div class=\"bg-slate-900 rounded-lg p-4 overflow-x-auto text-xs sm:text-sm\">\n    <pre><code class=\"lang-jsx text-slate-300\">import { QueryClient, QueryClientProvider } from 'react-query';\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      {/* سایر کامپوننت‌های برنامه */}\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n</code></pre>\n  </div>\n</section>\n\n<section id=\"basic-usage\" class=\"mb-12 px-2\">\n  <h2 class=\"text-xl sm:text-2xl font-bold text-blue-400 border-r-4 border-blue-400 pr-3 mb-4\">استفاده پایه از React Query</h2>\n  <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">برای fetch کردن داده‌ها از هوک <code>useQuery</code> استفاده می‌کنیم:</p>\n  <div class=\"bg-slate-900 rounded-lg p-4 mb-6 overflow-x-auto text-xs sm:text-sm\">\n    <pre><code class=\"lang-jsx text-slate-300\">import { useQuery } from 'react-query';\n\nfunction Todos() {\n  const { isLoading, error, data } = useQuery('todos', () =>\n    fetch('https://api.example.com/todos').then(res => res.json())\n  );\n\n  if (isLoading) return <div>در حال بارگذاری...</div>;\n  if (error) return <div>خطا در دریافت داده‌ها</div>;\n\n  return (\n    <ul>\n      {data.map(todo => (\n        <li key={todo.id}>{todo.title}</li>\n      ))}\n    </ul>\n  );\n}\n</code></pre>\n  </div>\n  <p class=\"text-slate-400 mb-4 text-base leading-relaxed\"><code>useQuery</code> سه مقدار اصلی برمی‌گرداند: <code>isLoading</code> برای وضعیت بارگذاری، <code>error</code> برای خطاها و <code>data</code> برای داده‌های دریافتی.</p>\n</section>\n\n<section id=\"mutations\" class=\"mb-12 px-2\">\n  <h2 class=\"text-xl sm:text-2xl font-bold text-blue-400 border-r-4 border-blue-400 pr-3 mb-4\">تغییر داده‌ها با useMutation</h2>\n  <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">برای عملیات POST, PUT, DELETE و PATCH از <code>useMutation</code> استفاده می‌کنیم:</p>\n  <div class=\"bg-slate-900 rounded-lg p-4 overflow-x-auto text-xs sm:text-sm\">\n    <pre><code class=\"lang-jsx text-slate-300\">import { useMutation, useQueryClient } from 'react-query';\n\nfunction AddTodo() {\n  const queryClient = useQueryClient();\n  \n  const mutation = useMutation(\n    newTodo => fetch('/api/todos', {\n      method: 'POST',\n      body: JSON.stringify(newTodo)\n    }),\n    {\n      onSuccess: () => {\n        // بی‌اعتبار کردن کش و refetch کردن داده‌ها\n        queryClient.invalidateQueries('todos');\n      }\n    }\n  );\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    mutation.mutate({ title: 'کار جدید', completed: false });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <button type=\"submit\">اضافه کردن</button>\n    </form>\n  );\n}\n</code></pre>\n  </div>\n</section>\n\n<section id=\"advanced-features\" class=\"mb-12 px-2\">\n  <h2 class=\"text-xl sm:text-2xl font-bold text-blue-400 border-r-4 border-blue-400 pr-3 mb-4\">ویژگی‌های پیشرفته React Query</h2>\n  \n  <h3 class=\"text-lg font-semibold text-blue-300 mb-3\">Prefetch کردن داده‌ها</h3>\n  <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">می‌توانید داده‌ها را قبل از نیاز کاربر fetch کنید تا تجربه کاربری بهتری ارائه دهید:</p>\n  <div class=\"bg-slate-900 rounded-lg p-4 mb-6 overflow-x-auto text-xs sm:text-sm\">\n    <pre><code class=\"lang-jsx text-slate-300\">const queryClient = useQueryClient();\n\n// پیش‌فرض کردن داده‌ها\nawait queryClient.prefetchQuery('todos', fetchTodos);\n</code></pre>\n  </div>\n  \n  <h3 class=\"text-lg font-semibold text-blue-300 mb-3\">Pagination</h3>\n  <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">مدیریت صفحه‌بندی داده‌ها با React Query بسیار ساده است:</p>\n  <div class=\"bg-slate-900 rounded-lg p-4 mb-6 overflow-x-auto text-xs sm:text-sm\">\n    <pre><code class=\"lang-jsx text-slate-300\">function Todos({ page }) {\n  const { data } = useQuery(['todos', page], () => fetchTodos(page), {\n    keepPreviousData: true // برای انتقال نرم بین صفحات\n  });\n\n  // رندر کردن داده‌ها\n}\n</code></pre>\n  </div>\n  \n  <h3 class=\"text-lg font-semibold text-blue-300 mb-3\">Infinite Scroll</h3>\n  <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">پیاده‌سازی infinite scroll با هوک <code>useInfiniteQuery</code>:</p>\n  <div class=\"bg-slate-900 rounded-lg p-4 overflow-x-auto text-xs sm:text-sm\">\n    <pre><code class=\"lang-jsx text-slate-300\">import { useInfiniteQuery } from 'react-query';\n\nfunction Projects() {\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage\n  } = useInfiniteQuery(\n    'projects',\n    ({ pageParam = 0 }) => fetchProjects(pageParam),\n    {\n      getNextPageParam: (lastPage) => lastPage.nextPage,\n    }\n  );\n\n  return (\n    <div>\n      {data.pages.map((page, i) => (\n        <React.Fragment key={i}>\n          {page.projects.map(project => (\n            <p key={project.id}>{project.name}</p>\n          ))}\n        </React.Fragment>\n      ))}\n      <button\n        onClick={() => fetchNextPage()}\n        disabled={!hasNextPage || isFetchingNextPage}\n      >\n        {isFetchingNextPage\n          ? 'در حال بارگذاری...'\n          : hasNextPage\n          ? 'بارگذاری بیشتر'\n          : 'همه داده‌ها بارگذاری شد'}\n      </button>\n    </div>\n  );\n}\n</code></pre>\n  </div>\n</section>\n\n<section id=\"devtools\" class=\"mb-12 px-2\">\n  <h2 class=\"text-xl sm:text-2xl font-bold text-blue-400 border-r-4 border-blue-400 pr-3 mb-4\">React Query Devtools</h2>\n  <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">React Query دارای ابزارهای توسعه اختصاصی است که به دیباگ کردن کمک می‌کند:</p>\n  <div class=\"bg-slate-900 rounded-lg p-4 mb-6 overflow-x-auto text-xs sm:text-sm\">\n    <pre><code class=\"lang-jsx text-slate-300\">import { ReactQueryDevtools } from 'react-query/devtools';\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      {/* سایر کامپوننت‌ها */}\n      <ReactQueryDevtools initialIsOpen={false} />\n    </QueryClientProvider>\n  );\n}\n</code></pre>\n  </div>\n  <p class=\"text-slate-400 mb-4 text-base leading-relaxed\">این ابزار وضعیت تمام queryها و mutationها را نشان می‌دهد و برای بهینه‌سازی عملکرد بسیار مفید است.</p>\n</section>\n\n<section id=\"conclusion\" class=\"mb-12 px-2\">\n  <h2 class=\"text-xl sm:text-2xl font-bold text-blue-400 border-r-4 border-blue-400 pr-3 mb-4\">جمع‌بندی</h2>\n  <div class=\"bg-slate-800 rounded-xl p-5\">\n    <p class=\"text-slate-400 text-sm\">React Query انقلابی در مدیریت داده‌های سرور در برنامه‌های React ایجاد کرده است. با ویژگی‌هایی مانند کشینگ خودکار، به‌روزرسانی در پس‌زمینه، prefetching، pagination و infinite scroll، این کتابخانه به یکی از ابزارهای ضروری برای توسعه‌دهندگان تبدیل شده است. یادگیری React Query نه تنها کدنویسی را ساده‌تر می‌کند، بلکه عملکرد برنامه‌ها را نیز به طور چشمگیری بهبود می‌بخشد.</p>\n  </div>\n</section>",
      "image": {
        "src": "https://uploadkon.ir/uploads/0e0a7f_react-query.png",
        "alt": "React Query",
        "title": "React Query"
      },
      "category": "ReactJS",
      "date": "1403/04/10",
      "author": "محمد علی سماوات",
      "tags": [
        "React",
        "React Query",
        "Data Fetching",
        "State Management",
        "Caching",
        "آموزش React",
        "useQuery",
        "useMutation",
        "Server State"
      ]
    }
  ]
}
